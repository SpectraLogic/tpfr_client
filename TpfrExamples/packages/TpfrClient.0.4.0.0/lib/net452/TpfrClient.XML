<?xml version="1.0"?>
<doc>
    <assembly>
        <name>TpfrClient</name>
    </assembly>
    <members>
        <member name="M:TpfrClient.Calls.IndexFileRequest.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="filePath">The full path (via a mapped drive on the StorNext MDC) to the media file to be indexed.</param>
        </member>
        <member name="M:TpfrClient.Calls.FileStatusRequest.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="filePath">The full path (via a mapped drive on the StorNext MDC) to the media file whose status is to be retrieved.</param>
        </member>
        <member name="M:TpfrClient.Calls.QuestionTimecodeRequest.#ctor(System.String,TpfrClient.Model.TimeCode,TpfrClient.Model.TimeCode,System.String)">
            <summary>
            
            </summary>
            <param name="filePath">The full path (via a mapped drive) to the media file whose partial offsets are being requested.</param>
            <param name="firstFrame">Timecode of the first frame requested</param>
            <param name="lastFrame">Timecode of the last frame requested</param>
            <param name="frameRate">Frame rate, as returned in the file status report</param>
        </member>
        <member name="M:TpfrClient.Calls.ReWrapRequest.#ctor(System.String,TpfrClient.Model.TimeCode,TpfrClient.Model.TimeCode,System.String,System.String,System.String)">
            <summary>
            
            </summary>
            <param name="filePath">The full path to the media file whose partial offsets are being requested.</param>
            <param name="firstFrame">Timecode of the first frame requested</param>
            <param name="lastFrame">Timecode of the last frame requested</param>
            <param name="frameRate">Frame rate, as returned in the file status report</param>
            <param name="partialRestoreFilePath">Full UNC path to partial restored file fragment</param>
            <param name="outputFileName">output file name for partial media file (care should be taken that this does not clash with other part restores, e.g. from other sections of the same source file). This should not have an extension, as this will added automatically.</param>
        </member>
        <member name="M:TpfrClient.Calls.ReWrapStatusRequest.#ctor(System.String)">
            <summary>
            
            </summary>
            <param name="outputFileName">The out_filename value passed in the Partial File Request. This is Case Sensitive</param>
        </member>
        <member name="M:TpfrClient.TpfrClient.IndexFile(TpfrClient.Calls.IndexFileRequest)">
            <summary>
            This method will block while the index is created and will only return when either the index file has been created or for some reason it has not been possible to create the index file.
            On HFS systems that leave stub files on disk, such as StorNext, if a request is made to create an index for a media file which has been truncated by StorNext, this call will cause the entire media file to be restored by StorNext.
            The Web Service will support multiple concurrent calls to this command.
            </summary>
            <param name="request"><seealso cref="T:TpfrClient.Calls.IndexFileRequest" /></param>
            <returns></returns>
        </member>
        <member name="M:TpfrClient.TpfrClient.FileStatus(TpfrClient.Calls.FileStatusRequest)">
            <summary>
            This method will block while retrieving the index status for a previously indexed file.
            This method internally uses an XML file, generated by the indexer to retrieve the detailed status.This XML file is only generated by Quantum PFR version 1.1 and later.For files that were indexed in an earlier version of Quantum PFR, minimal information will be retrieved (just whether the file had been indexed or not).
            The Web Service will support multiple concurrent calls to this API call.
            </summary>
            <param name="request"><seealso cref="T:TpfrClient.Calls.FileStatusRequest" /></param>
            <returns></returns>
        </member>
        <member name="M:TpfrClient.TpfrClient.QuestionTimecode(TpfrClient.Calls.QuestionTimecodeRequest)">
            <summary>
            This method will block whilst retrieving the start and end byte offsets for the requested timecodes. The offsets are extended in order to handle GOP and interleave ordering.
            Timecode format should be in form hh:mm:ss:ff for non-drop framerates and hh:mm:ss;ff for drop framerates
            </summary>
            <param name="request"><seealso cref="T:TpfrClient.Calls.QuestionTimecodeRequest" /></param>
            <returns></returns>
        </member>
        <member name="M:TpfrClient.TpfrClient.ReWrap(TpfrClient.Calls.ReWrapRequest)">
            <summary>
            This method will use the parameters supplied to generate a Marquis XML file that will be used to create the partial output file.
            </summary>
            <param name="request"><seealso cref="T:TpfrClient.Calls.ReWrapRequest" /></param>
            <returns></returns>
        </member>
        <member name="M:TpfrClient.TpfrClient.ReWrapStatus(TpfrClient.Calls.ReWrapStatusRequest)">
            <summary>
            This method will return status (% complete) for the creation of a partial media file initiated using the Partial File Request API call.
            </summary>
            <param name="request"><seealso cref="T:TpfrClient.Calls.ReWrapStatusRequest" /></param>
            <returns></returns>
        </member>
        <member name="M:TpfrClient.ITpfrClient.IndexFile(TpfrClient.Calls.IndexFileRequest)">
            <summary>
            This method will block while the index is created and will only return when either the index file has been created or for some reason it has not been possible to create the index file.
            On HFS systems that leave stub files on disk, such as StorNext, if a request is made to create an index for a media file which has been truncated by StorNext, this call will cause the entire media file to be restored by StorNext.
            The Web Service will support multiple concurrent calls to this command.
            </summary>
            <param name="request">
            <seealso cref="T:TpfrClient.Calls.IndexFileRequest"/>
            </param>
            <returns></returns>
        </member>
        <member name="M:TpfrClient.ITpfrClient.FileStatus(TpfrClient.Calls.FileStatusRequest)">
            <summary>
            This method will block while retrieving the index status for a previously indexed file.
            This method internally uses an XML file, generated by the indexer to retrieve the detailed status.This XML file is only generated by Quantum PFR version 1.1 and later.For files that were indexed in an earlier version of Quantum PFR, minimal information will be retrieved (just whether the file had been indexed or not).
            The Web Service will support multiple concurrent calls to this API call.
            </summary>
            <param name="request">
            <seealso cref="T:TpfrClient.Calls.FileStatusRequest"/>
            </param>
            <returns></returns>
        </member>
        <member name="M:TpfrClient.ITpfrClient.QuestionTimecode(TpfrClient.Calls.QuestionTimecodeRequest)">
            <summary>
            This method will block whilst retrieving the start and end byte offsets for the requested timecodes. The offsets are extended in order to handle GOP and interleave ordering.
            Timecode format should be in form hh:mm:ss:ff for non-drop framerates and hh:mm:ss;ff for drop framerates
            </summary>
            <param name="request">
            <seealso cref="T:TpfrClient.Calls.QuestionTimecodeRequest"/>
            </param>
            <returns></returns>
        </member>
        <member name="M:TpfrClient.ITpfrClient.ReWrap(TpfrClient.Calls.ReWrapRequest)">
            <summary>
            This method will use the parameters supplied to generate a Marquis XML file that will be used to create the partial output file.
            </summary>
            <param name="request"><seealso cref="T:TpfrClient.Calls.ReWrapRequest" /></param>
            <returns></returns>
        </member>
        <member name="M:TpfrClient.ITpfrClient.ReWrapStatus(TpfrClient.Calls.ReWrapStatusRequest)">
            <summary>
            This method will return status (% complete) for the creation of a partial media file initiated using the Partial File Request API call.
            </summary>
            <param name="request">
            <seealso cref="T:TpfrClient.Calls.ReWrapStatusRequest"/>
            </param>
            <returns></returns>
        </member>
    </members>
</doc>
